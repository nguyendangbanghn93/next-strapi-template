stages:
  - test
  - build
  - deploy
  - build-fe
  - deploy-fe

variables:
  CI_REGISTRY: "registry.gitlab.com"  # todo: remove
  CI_REGISTRY_IMAGE: "registry.gitlab.com/tienhieud/app"  # todo: remove

  BACKEND_SRC_LOCATION: "./app/backend"
  BACKEND_IMAGE_NAME: "$CI_REGISTRY_IMAGE/app-backend"
  BACKEND_CONTAINER_NAME: "app-backend"

  FRONTEND_SRC_LOCATION: "./app/frontend"
  FRONTEND_IMAGE_NAME: "$CI_REGISTRY_IMAGE/app-frontend"
  FRONTEND_CONTAINER_NAME: "app-frontend"

  TMP_KEY_FILE: "appsshkey.pem"

# test-backend:
#   stage: test
#   image: docker:latest
#   services:
#     - name: docker:19.03.8-dind
#   before_script:
#     - echo "Test start..."
#   script:
#     - echo "Test done..."
#   only:
#     - master

build-backend:
  stage: build
  image: docker:latest
  services:
    - name: docker:19.03.8-dind
  before_script:
    - echo $BACKEND_IMAGE_NAME
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$BACKEND_IMAGE_NAME" 
        --build-arg DATABASE_CLIENT=$DATABASE_CLIENT 
        --build-arg DATABASE_NAME=$DATABASE_NAME 
        --build-arg DATABASE_HOST=$DATABASE_HOST 
        --build-arg DATABASE_PORT=$DATABASE_PORT 
        --build-arg DATABASE_USERNAME=$DATABASE_USERNAME 
        --build-arg DATABASE_PASSWORD=$DATABASE_PASSWORD 
        --build-arg DATABASE_ROOT_PASSWORD=$DATABASE_ROOT_PASSWORD 
        --build-arg DATABASE_SSL=$DATABASE_SSL
        --build-arg NEXT_PUBLIC_PREVIEW_SECRET_TOKEN=$NEXT_PUBLIC_PREVIEW_SECRET_TOKEN
        --build-arg NEXT_URL=$NEXT_URL
        --build-arg STRAPI_SMTP_USERNAME=$STRAPI_SMTP_USERNAME
        --build-arg STRAPI_SMTP_PASSWORD=$STRAPI_SMTP_PASSWORD
        $BACKEND_SRC_LOCATION
    - echo "Registry image:" $BACKEND_IMAGE_NAME
    - docker push "$BACKEND_IMAGE_NAME"
    - docker image rm "$BACKEND_IMAGE_NAME"
  only:
    - master

# TODO: copy file docker-compose from project to server and run
# - scp -o StrictHostKeyChecking=no -i $TMP_KEY_FILE ./.deploy/docker-compose.yml $SSH_USER@$SSH_PROD_SERVER_IP:/root/docker-compose.yml
# - ssh -o StrictHostKeyChecking=no -i $TMP_KEY_FILE $SSH_USER@$SSH_PROD_SERVER_IP 
#   "docker-compose up -d"
deploy-backend: 
  stage: deploy
  image: ictu/sshpass
  before_script:
    - echo "deploying app backend strapi 1"
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > $TMP_KEY_FILE
    - chmod 400 $TMP_KEY_FILE
  script:
    ### for internal runner
    - sshpass -p $SSH_PROD_SERVER_PASSWORD ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_PROD_SERVER_IP
      "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
    - sshpass -p $SSH_PROD_SERVER_PASSWORD ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_PROD_SERVER_IP
      "docker pull $BACKEND_IMAGE_NAME"
    - sshpass -p $SSH_PROD_SERVER_PASSWORD ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_PROD_SERVER_IP
      "cd ~/app-production
        && echo BACKEND_IMAGE_NAME=$BACKEND_IMAGE_NAME > .env
        && echo BACKEND_CONTAINER_NAME=$BACKEND_CONTAINER_NAME >> .env
        && echo DATABASE_CLIENT=$DATABASE_CLIENT >> .env
        && echo DATABASE_NAME=$DATABASE_NAME  >> .env
        && echo DATABASE_HOST=$DATABASE_HOST  >> .env
        && echo DATABASE_PORT=$DATABASE_PORT  >> .env
        && echo DATABASE_USERNAME=$DATABASE_USERNAME  >> .env
        && echo DATABASE_PASSWORD=$DATABASE_PASSWORD  >> .env
        && echo DATABASE_ROOT_PASSWORD=$DATABASE_ROOT_PASSWORD  >> .env
        && echo DATABASE_SSL=$DATABASE_SSL  >> .env
        && echo NEXT_PUBLIC_PREVIEW_SECRET_TOKEN=$NEXT_PUBLIC_PREVIEW_SECRET_TOKEN  >> .env
        && echo NEXT_URL=$NEXT_URL  >> .env
        && echo STRAPI_SMTP_USERNAME=$STRAPI_SMTP_USERNAME  >> .env
        && echo STRAPI_SMTP_PASSWORD=$STRAPI_SMTP_PASSWORD  >> .env"
    - sshpass -p $SSH_PROD_SERVER_PASSWORD ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_PROD_SERVER_IP
      "cd ~/app-production && docker-compose up -d"
    ### for external runner
    # - ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_PROXY_SERVER_IP -p 2222 -i $TMP_KEY_FILE "sshpass -p $SSH_PROD_SERVER_PASSWORD ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_PROD_SERVER_IP 
    #   \"docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY\""
    # - ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_PROXY_SERVER_IP -p 2222 -i $TMP_KEY_FILE "sshpass -p $SSH_PROD_SERVER_PASSWORD ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_PROD_SERVER_IP 
    #   \"docker pull $BACKEND_IMAGE_NAME\""
    # - ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_PROXY_SERVER_IP -p 2222 -i $TMP_KEY_FILE "sshpass -p $SSH_PROD_SERVER_PASSWORD ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_PROD_SERVER_IP 
    #   \"cd ~/app-production
    #     && echo BACKEND_IMAGE_NAME=$BACKEND_IMAGE_NAME > .env
    #     && echo BACKEND_CONTAINER_NAME=$BACKEND_CONTAINER_NAME >> .env
    #     && echo DATABASE_CLIENT=$DATABASE_CLIENT >> .env
    #     && echo DATABASE_NAME=$DATABASE_NAME  >> .env
    #     && echo DATABASE_HOST=$DATABASE_HOST  >> .env
    #     && echo DATABASE_PORT=$DATABASE_PORT  >> .env
    #     && echo DATABASE_USERNAME=$DATABASE_USERNAME  >> .env
    #     && echo DATABASE_PASSWORD=$DATABASE_PASSWORD  >> .env
    #     && echo DATABASE_ROOT_PASSWORD=$DATABASE_ROOT_PASSWORD  >> .env
    #     && echo DATABASE_SSL=$DATABASE_SSL  >> .env
    #     && echo NEXT_PUBLIC_PREVIEW_SECRET_TOKEN=$NEXT_PUBLIC_PREVIEW_SECRET_TOKEN  >> .env
    #     && echo NEXT_URL=$NEXT_URL  >> .env
    #     && echo STRAPI_SMTP_USERNAME=$STRAPI_SMTP_USERNAME  >> .env
    #     && echo STRAPI_SMTP_PASSWORD=$STRAPI_SMTP_PASSWORD  >> .env\""
    # - ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_PROXY_SERVER_IP -p 2222 -i $TMP_KEY_FILE "sshpass -p $SSH_PROD_SERVER_PASSWORD ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_PROD_SERVER_IP 
    #   \"cd ~/app-production && docker-compose up -d\""
  after_script:
    - rm $TMP_KEY_FILE
  only:
    - master

build-fronend: 
  stage: build-fe
  image: docker:latest
  services:
    - name: docker:19.03.8-dind
  before_script:
    - echo $FRONTEND_IMAGE_NAME
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull 
      -t "$FRONTEND_IMAGE_NAME" 
      --build-arg NEXT_PUBLIC_STRAPI_API_URL=$NEXT_PUBLIC_STRAPI_API_URL 
      --build-arg NEXT_PUBLIC_PREVIEW_SECRET_TOKEN=$NEXT_PUBLIC_PREVIEW_SECRET_TOKEN 
      $FRONTEND_SRC_LOCATION
    - docker push "$FRONTEND_IMAGE_NAME"
    - echo "Registry image:" $FRONTEND_IMAGE_NAME
    - docker image rm "$FRONTEND_IMAGE_NAME"
  only:
    - master

deploy-frontend:      # This job runs in the deploy stage.
  stage: deploy-fe
  image: ictu/sshpass
  before_script:
    - echo "deploying app"
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > $TMP_KEY_FILE
    - chmod 400 $TMP_KEY_FILE
  script:
    # for internal runner
    - sshpass -p $SSH_PROD_SERVER_PASSWORD ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_PROD_SERVER_IP
      "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
    - sshpass -p $SSH_PROD_SERVER_PASSWORD ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_PROD_SERVER_IP
      "docker pull $FRONTEND_IMAGE_NAME"
    - sshpass -p $SSH_PROD_SERVER_PASSWORD ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_PROD_SERVER_IP
      "docker stop $FRONTEND_CONTAINER_NAME || true && docker rm $FRONTEND_CONTAINER_NAME || true"
    - sshpass -p $SSH_PROD_SERVER_PASSWORD ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_PROD_SERVER_IP
      "docker run -p 3000:3000 -d --name $FRONTEND_CONTAINER_NAME $FRONTEND_IMAGE_NAME"
    # for external runner
    # - ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_PROXY_SERVER_IP -p 2222 -i $TMP_KEY_FILE "sshpass -p $SSH_PROD_SERVER_PASSWORD ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_PROD_SERVER_IP 
    #   \"docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY\""
    # - ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_PROXY_SERVER_IP -p 2222 -i $TMP_KEY_FILE "sshpass -p $SSH_PROD_SERVER_PASSWORD ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_PROD_SERVER_IP 
    #   \"docker pull $FRONTEND_IMAGE_NAME\""
    # - ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_PROXY_SERVER_IP -p 2222 -i $TMP_KEY_FILE "sshpass -p $SSH_PROD_SERVER_PASSWORD ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_PROD_SERVER_IP 
    #   \"docker stop $FRONTEND_CONTAINER_NAME || true && docker rm $FRONTEND_CONTAINER_NAME || true\""
    # - ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_PROXY_SERVER_IP -p 2222 -i $TMP_KEY_FILE "sshpass -p $SSH_PROD_SERVER_PASSWORD ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_PROD_SERVER_IP 
    #   \"docker run -p 3000:3000 -d --name $FRONTEND_CONTAINER_NAME $FRONTEND_IMAGE_NAME\""
  after_script:
    - rm $TMP_KEY_FILE
  only:
    - master

# deploy:
#   stage: deploy
#   # image: docker:latest
#   # services:
#   #   - name: docker:19.03.8-dind
#   before_script:
#     - echo hello
#   script:
#     - cd /home/sonbn/landing/visera/app_landing/app_landing_page/
#     - git pull
#     - cd /home/sonbn/landing/visera/app_landing/app_landing_page/frontend/
#     - NEXT_PUBLIC_STRAPI_API_URL=https://app.ftech.ai yarn build
#     - cd /home/sonbn/landing/visera/app_landing/app_landing_page/backend/
#     - yarn build
#     - pm2 restart node
#     - pm2 restart strapi

#   only:
#     - master

# variables:
#   BACKEND_IMAGE_NAME: "$CI_REGISTRY_IMAGE/webcms-backend"
#   BACKEND_CONTAINER_NAME: "webcms-backend"
#   TMP_KEY_FILE: "backend-key.pem"
#   FRONTEND_IMAGE_NAME: "$CI_REGISTRY_IMAGE/webcms-frontend"
#   FRONTEND_CONTAINER_NAME: "webcms-frontend"

# build-backend:
#   stage: build-backend
#   image: docker:latest
#   services:
#     - name: docker:19.03.8-dind
#   before_script:
#     - echo $BACKEND_IMAGE_NAME
#     - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
#   script:
#     - docker build --pull -t "$BACKEND_IMAGE_NAME" 
#         --build-arg DATABASE_CLIENT=$DATABASE_CLIENT 
#         --build-arg DATABASE_NAME=$DATABASE_NAME 
#         --build-arg DATABASE_HOST=$DATABASE_HOST 
#         --build-arg DATABASE_PORT=$DATABASE_PORT 
#         --build-arg DATABASE_USERNAME=$DATABASE_USERNAME 
#         --build-arg DATABASE_PASSWORD=$DATABASE_PASSWORD 
#         --build-arg DATABASE_ROOT_PASSWORD=$DATABASE_ROOT_PASSWORD 
#         --build-arg NEXT_PUBLIC_STRAPI_API_URL=$NEXT_PUBLIC_STRAPI_API_URL 
#         ./webcms/backend
#     - docker push "$BACKEND_IMAGE_NAME"
#     - echo "Registry image:" $BACKEND_IMAGE_NAME
#   only:
#     - main
  
# deploy-backend: 
#   stage: deploy-backend
#   image: kroniak/ssh-client
#   before_script:
#     - echo "deploying app"
#   script:
#     - echo "Registry image:" $CI_REGISTRY_IMAGE
#     - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > $TMP_KEY_FILE
#     - chmod 400 $TMP_KEY_FILE
#     - ssh -o StrictHostKeyChecking=no -i $TMP_KEY_FILE $SSH_USER@$SSH_PROD_SERVER_IP 
#       "sudo docker login -u \"$CI_REGISTRY_USER\" -p \"$CI_REGISTRY_PASSWORD\" $CI_REGISTRY"
#     - ssh -o StrictHostKeyChecking=no -i $TMP_KEY_FILE $SSH_USER@$SSH_PROD_SERVER_IP 
#       "sudo docker pull $BACKEND_IMAGE_NAME"
#     - ssh -o StrictHostKeyChecking=no -i $TMP_KEY_FILE $SSH_USER@$SSH_PROD_SERVER_IP 
#         "cd ~ 
#           && echo BACKEND_IMAGE_NAME=$BACKEND_IMAGE_NAME > .env
#           && echo DATABASE_CLIENT=$DATABASE_CLIENT >> .env
#           && echo DATABASE_NAME=$DATABASE_NAME  >> .env
#           && echo DATABASE_HOST=$DATABASE_HOST  >> .env
#           && echo DATABASE_PORT=$DATABASE_PORT  >> .env
#           && echo DATABASE_USERNAME=$DATABASE_USERNAME  >> .env
#           && echo DATABASE_PASSWORD=$DATABASE_PASSWORD  >> .env
#           && echo DATABASE_ROOT_PASSWORD=$DATABASE_ROOT_PASSWORD  >> .env
#           && echo NEXT_PUBLIC_STRAPI_API_URL=$NEXT_PUBLIC_STRAPI_API_URL  >> .env
#           && sudo docker-compose up -d"
#     - rm $TMP_KEY_FILE
#   only:
#     - main

# build-fronend: 
#   stage: build-fronend
#   image: kroniak/ssh-client
#   before_script:
#     - echo "deploying fronend"
#   script:
#     - docker build --pull 
#       -t "$FRONTEND_IMAGE_NAME" 
#       --build-arg NEXT_PUBLIC_STRAPI_API_URL=$NEXT_PUBLIC_STRAPI_API_URL 
#       ./webcms/frontend
#     - docker push "$FRONTEND_IMAGE_NAME"
#     - echo "Registry image:" $FRONTEND_IMAGE_NAME
#   only:
#     - main

# deploy-frontend:      # This job runs in the deploy stage.
#   stage: deploy-frontend
#   image: kroniak/ssh-client
#   before_script:
#     - echo "deploying app"
#   script:
#     - echo "Registry image:" $CI_REGISTRY_IMAGE
#     - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > $TMP_KEY_FILE
#     - chmod 400 $TMP_KEY_FILE
#     - ssh -o StrictHostKeyChecking=no -i $TMP_KEY_FILE $SSH_USER@$SSH_PROD_SERVER_IP 
#       "sudo docker login -u \"$CI_REGISTRY_USER\" -p \"$CI_REGISTRY_PASSWORD\" $CI_REGISTRY"
#     - ssh -o StrictHostKeyChecking=no -i $TMP_KEY_FILE $SSH_USER@$SSH_PROD_SERVER_IP 
#       "sudo docker pull $FRONTEND_IMAGE_NAME"
#     - ssh -o StrictHostKeyChecking=no -i $TMP_KEY_FILE $SSH_USER@$SSH_PROD_SERVER_IP 
#       "sudo docker stop $FRONTEND_CONTAINER_NAME || true && docker rm $FRONTEND_CONTAINER_NAME || true"
#     - ssh -o StrictHostKeyChecking=no -i $TMP_KEY_FILE $SSH_USER@$SSH_PROD_SERVER_IP 
#       "sudo docker run -p 3005:3000 -d --name $FRONTEND_CONTAINER_NAME $FRONTEND_IMAGE_NAME"
#     - rm $TMP_KEY_FILE
#   only:
#     - main
